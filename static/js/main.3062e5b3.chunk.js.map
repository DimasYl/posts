{"version":3,"sources":["components/UI/myModal/MyModal.module.css","components/UI/button/MyButton.module.css","components/UI/input/MyInput.module.css","components/UI/loader/Loader.module.css","components/UI/button/MyButton.tsx","context/context.ts","components/UI/navbar/Navbar.tsx","pages/About.tsx","api/Postservise.ts","components/PostItem.tsx","components/PostList.tsx","hooks/useFetching.ts","hooks/usePosts.ts","utils/pages.ts","components/UI/input/MyInput.tsx","components/PostForm.tsx","components/UI/myModal/MyModal.tsx","components/UI/select/MySelect.tsx","components/PostFilter.tsx","components/UI/loader/Loader.tsx","components/UI/pagination/Pagination.tsx","pages/Posts.tsx","router/privateRoutes.ts","hooks/useObserver.ts","pages/PostIdPage.tsx","pages/Login.tsx","pages/AppRouter.tsx","App.tsx","index.tsx"],"names":["module","exports","MyButton","children","props","className","style","myBtn","AuthContext","createContext","Navbar","useContext","setIsAuth","isAuth","onClick","localStorage","removeItem","to","About","PostServise","limit","page","axios","get","params","_limit","_page","id","PostItem","post","removePost","router","useHistory","title","body","push","PostList","posts","length","textAlign","TransitionGroup","map","CSSTransition","timeout","classNames","useFetching","callback","useState","isLoading","setIsLoading","error","setError","a","message","usePosts","sort","query","sortedPosts","useMemo","console","log","b","localeCompare","useSortedPosts","filter","toLowerCase","includes","getPageCount","totalCount","Math","ceil","MyInput","React","forwardRef","ref","myInput","PostForm","create","setPost","value","type","placeholder","onChange","e","target","preventDefault","newPost","Date","now","MyModal","visible","setVisible","rootClasses","myModal","active","join","myModalContent","stopPropagation","MySelect","options","defaultValue","event","disabled","option","name","PostFilter","setFilter","selectedSort","Loader","loader","Pagination","totalPages","changePage","pagesArray","result","i","getPagesArray","p","Posts","privateRoutes","path","component","exact","setPosts","modal","setModal","setTotalPages","setLimit","setPage","lastElement","useRef","sortedAndSearchedPosts","getAll","response","data","headers","fetchPosts","isPostsLoading","postError","canLoad","observer","useEffect","current","IntersectionObserver","entries","isIntersecting","observe","useObserver","then","res","marginTop","margin","height","background","useParams","comments","setComments","getById","fetchPostById","getCommentsByPostId","fetchComments","isComLoading","r","comm","email","publicRoutes","onSubmit","setItem","AppRouter","route","App","getItem","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3062e5b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"myModal\":\"MyModal_myModal__k7guX\",\"myModalContent\":\"MyModal_myModalContent__tuzge\",\"active\":\"MyModal_active__2Kkl8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myBtn\":\"MyButton_myBtn__tlHpH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myInput\":\"MyInput_myInput__1d8vN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3PV-4\",\"rotate\":\"Loader_rotate__1pcQg\"};","import React from 'react';\r\nimport style from './MyButton.module.css'\r\n\r\ntype MyButtonPropsType = {\r\n    disabled?: boolean\r\n    onClick?: (e: any) => void\r\n    style?: any\r\n}\r\n\r\nconst MyButton: React.FC<MyButtonPropsType> = ({children, ...props}) => {\r\n    return (\r\n        <button {...props} className={style.myBtn}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default MyButton;","import {createContext} from \"react\";\r\n\r\nexport const AuthContext = createContext<any>(null)","import React, {useContext} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport MyButton from \"../button/MyButton\";\r\nimport {AuthContext} from \"../../../context/context\";\r\n\r\nconst Navbar = () => {\r\n    const {isAuth, setIsAuth} = useContext(AuthContext)\r\n\r\n    const logout = () => {\r\n        setIsAuth(false)\r\n        localStorage.removeItem('auth')\r\n    }\r\n\r\n    return (\r\n        <div className='navbar'>\r\n            <MyButton onClick={logout}>\r\n                Выйти\r\n            </MyButton>\r\n            <div className=\"navbar__links\">\r\n                <Link to=\"/about\">О сайте</Link>\r\n                <Link to=\"/posts\">Посты</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            Всем привет\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import axios from \"axios\";\r\n\r\nexport default class PostServise {\r\n    static async getAll(limit = 10, page = 1) {\r\n        return await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            params: {\r\n                _limit: limit,\r\n                _page: page\r\n            }\r\n        })\r\n    }\r\n    static async getById(id: string) {\r\n        return await axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n    }\r\n    static async getCommentsByPostId(id: string) {\r\n        return await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}/comments` )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {PostType} from \"./PostList\";\r\nimport MyButton from './UI/button/MyButton';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport type PostItemPropsType = {\r\n    post: PostType\r\n    removePost: (post: PostType) => void\r\n}\r\n\r\nconst PostItem: React.FC<PostItemPropsType> = ({post, removePost}) => {\r\n    const router = useHistory()\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__content\">\r\n                <strong>{post.id} {post.title}</strong>\r\n                <div>\r\n                    {post.body}\r\n                </div>\r\n            </div>\r\n            <div className=\"post__btn\">\r\n                <MyButton onClick={() => router.push(`/posts/${post.id}`)}>Открыть</MyButton>\r\n                <MyButton onClick={() => {removePost(post)}}>Удалить</MyButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport PostItem from \"./PostItem\";\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    title: string,\r\n    body: string\r\n}\r\nexport type PostListPropsType = {\r\n    posts: Array<PostType>,\r\n    title: string,\r\n    removePost: (post: PostType) => void\r\n}\r\n\r\nconst PostList: React.FC<PostListPropsType> = ({posts, title, removePost}) => {\r\n    if (!posts.length) {\r\n        return <h1 style={{textAlign: 'center'}}>\r\n            Посты не найдены\r\n        </h1>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1 style={{textAlign: 'center'}}>{title}</h1>\r\n            <TransitionGroup>\r\n                {posts.map((post) =>\r\n                    <CSSTransition\r\n                        key={post.id}\r\n                        timeout={500}\r\n                        classNames=\"post\"\r\n                    >\r\n                        <PostItem post={post} removePost={removePost}/>\r\n                    </CSSTransition>\r\n                )}\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PostList;","import {useState} from \"react\";\r\n\r\nexport const useFetching = (callback: Function) => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState('')\r\n\r\n    const fetching = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            await callback()\r\n        } catch (e: any) {\r\n            setError(e.message)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n    return [fetching, isLoading, error]\r\n}","import {useMemo} from \"react\";\r\nimport {PostType} from \"../components/PostList\";\r\n\r\nexport const useSortedPosts = (posts: Array<PostType>, sort: string) => {\r\n    return useMemo(() => {\r\n        console.log('прошла перерисовка')\r\n        if (sort) {\r\n            // @ts-ignore\r\n            return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]))\r\n        }\r\n        return posts\r\n    }, [sort, posts])\r\n}\r\n\r\nexport const usePosts = (posts: Array<PostType>, sort: string, query: string) => {\r\n    const sortedPosts = useSortedPosts(posts, sort)\r\n    return useMemo(() => {\r\n        return sortedPosts.filter((post: PostType) => post.title.toLowerCase().includes(query.toLowerCase()))\r\n    }, [query, sortedPosts])\r\n}","export const getPageCount = (totalCount: number, limit: number) => {\r\n        return Math.ceil(totalCount / limit)\r\n}\r\n\r\nexport const getPagesArray = (totalPages: number) => {\r\n        let result = []\r\n        for (let i = 0; i < totalPages; i++){\r\n                result.push(i + 1)\r\n        }\r\n        return result\r\n}","import React from 'react';\r\nimport style from './MyInput.module.css'\r\n\r\nconst MyInput = React.forwardRef((props: any, ref) => {\r\n    return (\r\n        <input ref={ref} className={style.myInput} {...props} />\r\n    );\r\n})\r\n\r\nexport default MyInput;","import React, {useState} from 'react';\r\nimport MyInput from \"./UI/input/MyInput\";\r\nimport MyButton from \"./UI/button/MyButton\";\r\nimport {PostType} from \"./PostList\";\r\n\r\ntype PostFormPropsType = {\r\n    create: (newPost: PostType) => void\r\n}\r\n\r\nconst PostForm: React.FC<PostFormPropsType> = ({create}) => {\r\n\r\n    const [post, setPost] = useState({title: '', body: ''})\r\n\r\n    const addNewPost = (e: any) => {\r\n        e.preventDefault()\r\n        const newPost = {\r\n            id: Date.now(),  ...post\r\n        }\r\n        create(newPost)\r\n        setPost({title: '', body: ''})\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            {/*Управляемый инпут*/}\r\n            <MyInput\r\n                value={post.title}\r\n                type=\"text\"\r\n                placeholder='Название поста'\r\n                onChange={(e: any) => setPost({...post, title: e.target.value})}/>\r\n            {/*Неуправляемый инпут*/}\r\n            <MyInput\r\n                type=\"text\"\r\n                value={post.body}\r\n                onChange={(e: any) => setPost({...post, body: e.target.value})}\r\n                placeholder='Описание поста'\r\n            />\r\n            <MyButton onClick={addNewPost}>Создать пост</MyButton>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PostForm;","import React from 'react';\r\nimport style from './MyModal.module.css'\r\n\r\ntype MyModalPropsType = {\r\n    visible: boolean\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst MyModal: React.FC<MyModalPropsType> = ({children, visible, setVisible}) => {\r\n\r\n    const rootClasses = [style.myModal]\r\n    if (visible) {\r\n        rootClasses.push(style.active)\r\n    }\r\n\r\n    return (\r\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\r\n            <div className={style.myModalContent} onClick={(e) => e.stopPropagation() }>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyModal;","import React from 'react';\r\n\r\ntype OptionType = {\r\n    value: string | number,\r\n    name: string\r\n}\r\n\r\ntype MySelectPropsType = {\r\n    value: string | number\r\n    defaultValue: string,\r\n    options: Array<OptionType>\r\n    onChange: (sort: any) => void\r\n}\r\n\r\nconst MySelect:React.FC<MySelectPropsType> = ({options, defaultValue, value, onChange}) => {\r\n    return (\r\n        <select\r\n        value={value}\r\n        onChange={event => onChange(event.target.value)}\r\n        >\r\n            <option disabled value=\"\">{defaultValue}</option>\r\n            {options.map(option => {\r\n               return  <option key={option.value} value={option.value}>\r\n                    {option.name}\r\n                </option>\r\n            })}\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default MySelect;","import React, {Dispatch, SetStateAction} from 'react';\r\nimport MyInput from \"./UI/input/MyInput\";\r\nimport MySelect from \"./UI/select/MySelect\";\r\n\r\ntype PostFilterPropsType = {\r\n    filter: {\r\n        sort: string,\r\n        query: string\r\n    },\r\n    setFilter: Dispatch<SetStateAction<{ sort: string; query: string; }>>\r\n}\r\n\r\nconst PostFilter: React.FC<PostFilterPropsType> = ({filter,setFilter}) => {\r\n    return (\r\n        <div>\r\n            <MyInput\r\n                value={filter.query}\r\n                onChange={(event: any) => setFilter({...filter, query: event.target.value})}\r\n                placeholder='Поиск ...'\r\n            />\r\n            <MySelect\r\n                value={filter.sort}\r\n                onChange={selectedSort => setFilter({...filter, sort: selectedSort})}\r\n                defaultValue='Сортировка'\r\n                options={[\r\n                    {value: 'title', name: 'По названию'},\r\n                    {value: 'body', name: 'По описанию'}\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostFilter;","import React from 'react';\r\nimport style from './Loader.module.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={style.loader}>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React from 'react';\r\nimport {getPagesArray} from \"../../../utils/pages\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number\r\n    page: number\r\n    changePage: (page: number) => void\r\n}\r\n\r\n\r\nconst Pagination:React.FC<PaginationPropsType> = ({totalPages, page, changePage}) => {\r\n    let pagesArray = getPagesArray(totalPages)\r\n    return (\r\n        <div className='page__wrapper'>\r\n            {pagesArray.map(p => {\r\n                return <span\r\n                    onClick={() => changePage(p)}\r\n                    key={p}\r\n                    className={page === p ? 'page page__current' : 'page'}>\r\n                        {p}\r\n                    </span>\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React, {useEffect, useRef, useState} from 'react';\r\nimport PostServise from '../api/Postservise';\r\nimport PostList, {PostType} from \"../components/PostList\";\r\nimport { useFetching } from '../hooks/useFetching';\r\nimport {usePosts} from \"../hooks/usePosts\";\r\nimport { getPageCount } from '../utils/pages';\r\nimport MyButton from \"../components/UI/button/MyButton\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport MyModal from \"../components/UI/myModal/MyModal\";\r\nimport PostFilter from \"../components/PostFilter\";\r\nimport Loader from '../components/UI/loader/Loader';\r\nimport Pagination from '../components/UI/pagination/Pagination';\r\nimport {useObserver} from \"../hooks/useObserver\";\r\nimport MySelect from \"../components/UI/select/MySelect\";\r\n\r\n\r\nfunction Posts() {\r\n    const [posts, setPosts] = useState<Array<PostType>>([])\r\n    const [filter, setFilter] = useState({sort: '', query: ''})\r\n    const [modal, setModal] = useState(false)\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [limit, setLimit] = useState(10)\r\n    const [page, setPage] = useState(1)\r\n\r\n    const lastElement = useRef()\r\n\r\n    const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query)\r\n\r\n    const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\r\n        const response = await PostServise.getAll(limit, page)\r\n        setPosts([...posts, ...response.data])\r\n        const totalCount = (response.headers['x-total-count'])\r\n        setTotalPages(getPageCount(totalCount, limit))\r\n    })\r\n\r\n    useObserver(lastElement, page < totalPages, isPostsLoading, () => {\r\n        setPage(page + 1)\r\n    })\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        fetchPosts().then(res => res)\r\n    }, [page, limit])\r\n\r\n    const createPost = (newPost: PostType) => {\r\n        setPosts([...posts, newPost])\r\n        setModal(false)\r\n    }\r\n\r\n    const removePost = (post: PostType) => {\r\n        setPosts(posts.filter(p => p.id !== post.id))\r\n    }\r\n\r\n    const changePage = (page: number) => {\r\n        setPage(page)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <MyButton style={{marginTop: '30px'}} onClick={() => setModal(true)}>\r\n                Создать пользователя\r\n            </MyButton>\r\n            <MyModal visible={modal} setVisible={setModal}>\r\n                <PostForm create={createPost}/>\r\n            </MyModal>\r\n            <hr style={{margin: '15px'}}/>\r\n            <PostFilter filter={filter} setFilter={setFilter}/>\r\n            <MySelect\r\n                value={limit}\r\n                onChange={value => setLimit(value)}\r\n                defaultValue='Кол-во элементов на странице'\r\n                options={[\r\n                    {value: 5, name: '5'},\r\n                    {value: 10, name: '10'},\r\n                    {value: 25, name: '25'},\r\n                    {value: -1, name: 'Показать все'},\r\n                ]}\r\n            />\r\n            {postError &&\r\n            <h1>Произошла ошибка </h1>\r\n            }\r\n            {isPostsLoading &&\r\n                 <div className={'block'}><Loader/></div>\r\n            }\r\n            <PostList removePost={removePost} posts={sortedAndSearchedPosts} title='Посты про JS'/>\r\n            <div style={{height: 20, background:'white'}}/>\r\n            <Pagination\r\n                page={page}\r\n                changePage={changePage}\r\n                totalPages={totalPages}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Posts;\r\n","import About from \"../pages/About\";\r\nimport Posts from \"../pages/Posts\";\r\nimport PostIdPage from \"../pages/PostIdPage\";\r\nimport Login from \"../pages/Login\";\r\n\r\nexport const privateRoutes = [\r\n    {path: '/about', component: About, exact:true},\r\n    {path: '/posts', component: Posts, exact:true},\r\n    {path: '/posts/:id', component: PostIdPage, exact:true},\r\n]\r\n\r\nexport const publicRoutes = [\r\n    {path: '/login', component: Login, exact:true},\r\n]","import {useEffect, useRef} from \"react\";\r\n\r\nexport const useObserver = (ref: any, canLoad: boolean, isLoading: any, callback: Function) => {\r\n    const observer = useRef<IntersectionObserver>()\r\n\r\n    useEffect(() => {\r\n        if (isLoading) return\r\n        //     if(observer.current) {\r\n        //     observer.current.disconnect();\r\n        // }\r\n        var cb = function (entries: any) {\r\n            if (entries[0].isIntersecting && canLoad) {\r\n                callback()\r\n            }\r\n        };\r\n        if (observer.current) {\r\n            observer.current = new IntersectionObserver(cb);\r\n        }\r\n        if (observer.current) {\r\n            observer.current.observe(ref.current)\r\n        }\r\n    }, [isLoading])\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useFetching} from \"../hooks/useFetching\";\r\nimport PostServise from \"../api/Postservise\";\r\nimport Loader from \"../components/UI/loader/Loader\";\r\n\r\ntype ComType = {\r\n    email: string\r\n    body: string\r\n    id: string\r\n}\r\n\r\nconst PostIdPage = () => {\r\n    const params = useParams<{id: string}>()\r\n    const [post, setPost] = useState({id:'', title:''})\r\n    const [comments, setComments] = useState<Array<ComType>>([])\r\n\r\n    const [fetchPostById, isLoading, error] = useFetching( async () => {\r\n        const response = await PostServise.getById(params.id)\r\n        setPost(response.data)\r\n    })\r\n\r\n    const [fetchComments, isComLoading, comError] = useFetching( async () => {\r\n        const response = await PostServise.getCommentsByPostId(params.id)\r\n        setComments(response.data)\r\n    })\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        fetchPostById().then(r => r)\r\n        // @ts-ignore\r\n        fetchComments().then(r => r)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Вы открыли страницу поста c ID = {params.id}</h1>\r\n            {isLoading\r\n                ? <Loader/>\r\n                :  <div>{post.id}. {post.title}</div>\r\n            }\r\n            <h1>Комментарии к посту</h1>\r\n            {isComLoading\r\n                ? <Loader/>\r\n                : <div>\r\n                    {comments.map(comm =>\r\n                    <div key={comm.id} style={{marginTop: 15}}>\r\n                        <h5>{comm.email}</h5>\r\n                        <div>{comm.body}</div>\r\n                    </div>\r\n                    )}\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostIdPage;","import React, {FormEvent, useContext} from 'react';\r\nimport MyInput from \"../components/UI/input/MyInput\";\r\nimport MyButton from \"../components/UI/button/MyButton\";\r\nimport {AuthContext} from \"../context/context\";\r\n\r\nconst Login = () => {\r\n    const {isAuth, setIsAuth} = useContext(AuthContext)\r\n    const login = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault()\r\n        setIsAuth(true)\r\n        localStorage.setItem('auth', 'true')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Страница для логина</h1>\r\n            <form onSubmit={login}>\r\n                <MyInput type=\"text\" placeholder='Введите логин'/>\r\n                <MyInput type=\"password\" placeholder='Введите пароль'/>\r\n                <MyButton>Войти</MyButton>\r\n            </form>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, {useContext} from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {privateRoutes, publicRoutes} from \"../router/privateRoutes\";\r\nimport {AuthContext} from \"../context/context\";\r\nimport Loader from \"../components/UI/loader/Loader\";\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth, isLoading} = useContext(AuthContext)\r\n\r\n    if(isLoading){\r\n        return <Loader/>\r\n    }\r\n\r\n    return (\r\n        isAuth\r\n            ?\r\n            <Switch>\r\n                {privateRoutes.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        component={route.component}\r\n                        exact={route.exact}\r\n                        key={route.path}/>\r\n                )}\r\n                <Redirect to='/posts'/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(route =>\r\n                    <Route\r\n                        path={route.path}\r\n                        component={route.component}\r\n                        exact={route.exact}\r\n                        key={route.path}/>\r\n                )}\r\n                <Redirect to='/login'/>\r\n            </Switch>\r\n\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Navbar from \"./components/UI/navbar/Navbar\";\nimport AppRouter from \"./pages/AppRouter\";\nimport { AuthContext } from './context/context';\n\nfunction App() {\n    const [isAuth, setIsAuth] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        if(localStorage.getItem('auth')){\n            setIsAuth(true)\n        }\n        setIsLoading(false)\n    },[])\n\n    return (\n        <AuthContext.Provider value={{\n            isAuth,\n            setIsAuth,\n            isLoading\n        }}>\n        <BrowserRouter>\n            <Navbar/>\n            <AppRouter/>\n        </BrowserRouter>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}